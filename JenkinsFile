def modules = [:]
pipeline {
    triggers {
        githubPush()
    }
    agent none
    stages {

         stage('unit test') {
                  agent { docker {
                    image 'golang'
                    args '-u root:sudo -v $HOME'
                     }
                    }

                    when {
                                    branch 'develop'
                         }

                   steps {

                                          sh 'go version'
                                          sh 'go clean -cache'
                                          sh 'go test ./...'

                         }
               }
        stage('build') {
           agent { label 'slave2' }


            steps {

                                   script {
                                           def customImage = docker.build('singaravelan21/todo_list_manager', "./")
                                           docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                                           customImage.push("v1.0."+"${env.BUILD_NUMBER}")
                                           sh 'docker system prune -af --volumes'
                                           sh 'whoami'
                                           sh 'export KUBECONFIG=/home/ec2-user/config'
                                           sh 'echo $KUBECONFIG'
                                           sh 'cat /home/ec2-user/config'
                                           sh '/usr/local/bin/kubectl get po --kubeconfig /home/ec2-user/config'
                                           sh '/usr/local/bin/helm init --client-only'
                                           sh 'pwd'
                                           sh '/usr/local/bin/helm list --kubeconfig /home/ec2-user/config'
                                           sh '/usr/local/bin/helm upgrade --install my-todo-manager ./deployments/helmchart/todo-manager/todo-manager-0.1.0.tgz --set replicaCount=3'
                                            }
                                           }
                  }

        }
      }
    }

