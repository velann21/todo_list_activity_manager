def modules = [:]
pipeline {
    agent none
    stages {

         stage('init') {
                  agent { docker {
                    image 'golang'
                    args '-u root:sudo -v $HOME'
                     }
                    }

                    when {
                                    branch 'master'
                         }

                   steps {
                                          sh 'git checkout master'
                                          sh 'go version'
                                          sh 'go clean -cache'
                                          sh 'go test ./...'
                         }
               }
        stage('build') {
           agent { label 'slave2' }
            steps {
                                   script {
                                           def customImage = docker.build('singaravelan21/todo_list_manager', "./")
                                           docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                                           customImage.push("v1.0."+"${env.BUILD_NUMBER}")
                                           sh 'docker system prune -af --volumes'
                                            }
                                           }
                  }

        }

             stage('deploy') {
                   agent { label 'master' }

                    when {
                                                       branch 'master'
                         }
                    steps {
                                           script {
                                                   def customImage = docker.build('singaravelan21/todo_list_manager', "./")
                                                   docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                                                   customImage.push("v1.0."+"${env.BUILD_NUMBER}")
                                                   sh 'docker system prune -af --volumes'
                                                    }
                                                   }
                          }

                }
      }
    }

